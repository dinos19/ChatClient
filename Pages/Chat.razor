@page "/chat/{CurrentChatroomAccountId}"
@using ChatClient.Infrastructure
@using ChatClient.Models
@using ChatClient.Services.SignalR
@using ChatClient.Services.ViewServices
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using SqliteWasmHelper
@inject ChatService ChatService
@inject UserState UserState
@inject ISqliteWasmDbContextFactory<ClientDbContext> dbContext

<h3>Chat</h3>

@if (Messages == null)
{
    <p>Loading...</p>
}
else
{
    <div class="chat-wrapper">
        <div class="message-list">
            @foreach (var message in Messages)
            {
                <div class="message">
                    <div class="message-header">
                        <span class="message-sender">@message.FromAccount.Name</span>
                    </div>
                    <div class="message-content">
                        @message.Body
                    </div>
                </div>
            }
        </div>
        <div class="chat-input">
            <input type="text" @bind="newMessageText" placeholder="Type a message..." />
            <button @onclick="SendMessage">Send</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public string CurrentChatroomAccountId { get; set; }
    public List<ChatMessage> Messages = new List<ChatMessage>();
    private string newMessageText;
    ISignalRWrapper signalr;

    protected override async Task OnInitializedAsync()
    {
        signalr = new SignalRWrapper();
        await signalr.ConnectSignalRAsync();

        ((SignalRWrapper)signalr).Connection.On<string>("MessageReceived", (message) =>
           {
               var msg = JsonConvert.DeserializeObject<ChatMessage>(message);
               Messages.Add(msg);
               Console.WriteLine(msg);
               StateHasChanged();

           });

        ((SignalRWrapper)signalr).Connection.On<string>("ReceiveSpecificMessage", (message) =>
        {
            var msg = JsonConvert.DeserializeObject<ChatMessage>(message);
            Messages.Add(msg);
            Console.WriteLine(msg);
            StateHasChanged();

        });

        ((SignalRWrapper)signalr).Connection.On<string>("ReceiveMessage", async (message) =>
        {
            var msg = await HandleNewMessage(message);
            if (msg.Action == ChatMessageAction.NOACTION)
                Messages.Add(msg);
            StateHasChanged();
            Console.WriteLine(message);
        });

        await base.OnInitializedAsync();
    }
    private async Task<ChatMessage> HandleNewMessage(string message)
    {
        ChatMessage chatMessage = null;
        try
        {
            chatMessage = JsonConvert.DeserializeObject<ChatMessage>(message);

            switch (chatMessage.Action)
            {
                case ChatMessageAction.NOACTION:
                    try
                    {
                        using var ctx = await dbContext.CreateDbContextAsync();
                        await ctx.ChatMessages.AddAsync(chatMessage);
                        await ctx.SaveChangesAsync();
                    }
                    catch (Exception ex)
                    {
                        //Console.WriteLine(ex);
                    }
                    chatMessage.FromAccount = UserState.CurrentChatroom;
                    chatMessage.ToAccount = UserState.MyAccount;

                    break;
                case ChatMessageAction.ANNOUNCEMENTS:
                    break;

                case ChatMessageAction.HELLO:
                    UserState.CurrentChatConnection = await signalr.SayHello(UserState.MyAccount);
                    await signalr.JoinSpecificChatRoomAsync(UserState.CurrentChatConnection);
                    break;

                default:
                    break;
            }
        }
        catch (Exception ex)
        {
            if (message.Contains("joined", StringComparison.OrdinalIgnoreCase))
                chatMessage = new ChatMessage
                    {
                        Action = ChatMessageAction.ANNOUNCEMENTS,
                        Body = message,
                        Type = ChatMessageType.TEXT,
                        FromAccountId = 1,
                        ToAccountId = 0,

                    };
            else
                Console.WriteLine(ex);
        }

        return chatMessage;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        Messages = await ChatService.LoadSingleChatroom(UserState.MyAccount.AccountId, int.Parse(CurrentChatroomAccountId));

    }
    private async void SendMessage()
    {

        ChatMessage chatMessage = new ChatMessage
            {
                Action = ChatMessageAction.NOACTION,
                Body = newMessageText,
                FromAccountId = UserState.MyAccount.AccountId,
                ToAccountId = UserState.CurrentChatroom.AccountId,
                Type = ChatMessageType.TEXT
            };
        try
        {
            await signalr.SendMessage(chatMessage);
            chatMessage.FromAccount = UserState.MyAccount;
            chatMessage.ToAccount = UserState.CurrentChatroom;
            Messages.Add(chatMessage);
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }
    }
}