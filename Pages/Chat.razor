@page "/chat/{CurrentChatroomAccountId}"
@using ChatClient.Infrastructure
@using ChatClient.Models
@using ChatClient.Services
@using ChatClient.Services.SignalR
@using ChatClient.Services.SignalR.Hubs
@using ChatClient.Services.ViewServices
@using ChatClient.ViewModel
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using SqliteWasmHelper
@inject ChatViewModel viewModel
@implements IDisposable
@inject IJSRuntime JSRuntime;

<h3>Chat</h3>

<script>
    function scrollToBottom(element) {
        element.scrollTop = element.scrollHeight;
    }
</script>

@if (viewModel.Messages == null)
{
    <p>Loading...</p>
}
else
{
    <div class="chat-wrapper">
        <div class="message-list" @ref="messageListDiv">
            @foreach (var message in viewModel.Messages)
            {
                <div class="message">
                    <div class="message-header">
                        <span class="message-sender">@message.FromAccount.Name</span>
                    </div>
                    <div class="message-content">
                        @message.Body
                    </div>
                </div>
            }
        </div>
        <div class="chat-input">
            <button onclick="document.getElementById('flpicker').click()">Pick a file</button>
            <InputFile id="flpicker" OnChange="@OnInputFileChange" hidden multiple />
            <p>@viewModel.fileSize</p>
            <input type="text" @bind="viewModel.newMessageText" placeholder="Type a message..." />
            <button @onclick="SendMessage">Send</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public string CurrentChatroomAccountId { get; set; }
    private ElementReference messageListDiv;

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", messageListDiv);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            if (file.ContentType == "image/png")
            {
                var resizedImage = await file.RequestImageFileAsync("image/png", 400, 400);
            }

            using (var stream = file.OpenReadStream(file.Size))
            {
                viewModel.fileSize = (int)stream.Length;
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        //await UserStateService.InitializeAsync();
        viewModel.UserStateService.OnChange += StateHasChanged;
        viewModel.onMessageReceived += MessageReceived;

        await viewModel.chatHandler.SetUpSignalR();

        await Task.Delay(500); // Give some time for everything to load
        await ScrollToBottom();

    }

    private async void MessageReceived()
    {
        try
        {
            StateHasChanged();
            await ScrollToBottom();

        }
        catch (Exception ex)
        {

        }

    }
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        viewModel.Messages = await viewModel.ChatService.LoadSingleChatroom(viewModel.UserStateService.CurrentState.MyAccount.AccountId, int.Parse(CurrentChatroomAccountId));
        var hasUpdated = await viewModel.chatHandler.SendReadUpdates(viewModel.Messages);

        StateHasChanged();

        await Task.Yield();
        await ScrollToBottom();

    }

    public void Dispose()
    {
        viewModel.UserStateService.OnChange -= StateHasChanged;
    }
    private async void SendMessage(MouseEventArgs e)
    {

        viewModel.chatHandler.SendMessage(viewModel.newMessageText);
        //await ScrollToBottom();

    }
}