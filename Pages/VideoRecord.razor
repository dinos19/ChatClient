@using Blazored.Modal
@using ChatClient.Models
@using ChatClient.ViewModel
@inject VideoRecordViewModel viewModel
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="custom-modal-style">

    <video id="videoElement" controls autoplay class="VideoRecorderElement"></video>
    <button @onclick="(() => viewModel.StartRecording.Execute(null))">Start Recording</button>
    <button @onclick="(() => viewModel.PauseRecording.Execute(null))">Pause/Resume Recording</button>
    <button @onclick="(() => viewModel.StopRecording.Execute(null))">Stop Recording</button>

    <h1>LOADED VIDEO</h1>

    @if (!string.IsNullOrWhiteSpace(viewModel.videoSrc))
    {
        <video controls autoplay>
            <source src="@viewModel.videoSrc" type="video/webm">
            Your browser does not support the video tag.
        </video>
    }
    else
    {
        <p>No video to display</p>
    }
    <button @onclick="(() => viewModel.StopRecordingAndLoadVideo.Execute(null))">Record and Load Video</button>

</div>
@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public EventCallback<UploadResult> OnRecordingCompleted { get; set; }

    private IJSObjectReference _module;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        //NavigationManager.NavigateTo("/register", true);
    }

    protected override async Task OnInitializedAsync()
    {
        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/VideoRecordScripts.js");
        await viewModel.SetUpAsync(BlazoredModal);
        viewModel.OnRecordingCompleted += VideoRecordCompleted;
        await base.OnInitializedAsync();
    }
    private async void VideoRecordCompleted(UploadResult uploadResults)
    {
        await OnRecordingCompleted.InvokeAsync(uploadResults);
        viewModel.OnRecordingCompleted -= VideoRecordCompleted;
        await CloseModal();
    }
    private async Task CloseModal()
    {
        await BlazoredModal.CloseAsync();
    }

}