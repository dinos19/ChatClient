@page "/"
@inject NavigationManager NavigationManager
@inject ISqliteWasmDbContextFactory<ClientDbContext> dbContext
@inject UserState UserState

<h3>Register</h3>

@using System.ComponentModel.DataAnnotations
@using ChatClient.Infrastructure
@using ChatClient.Models
@using System.Text.Json
@using System.Text
@using SqliteWasmHelper

<EditForm Model="@account">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="username" class="form-control" @bind-Value="account.Name" />
        <ValidationMessage For="@(() => account.Name)" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="account.Email" InputType="InputType.Email" />
        <ValidationMessage For="@(() => account.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText @bind-Value="account.Password" type="password" class="form-control" />
        <ValidationMessage For="@(() => account.Password)" />
    </div>

    <button type="Register" class="btn btn-primary" @onclick="HandleRegistration">Register</button>
    <button type="Login" class="btn btn-primary" @onclick="HandleLogin">Login</button>

</EditForm>

@code {
    private Account account = new Account();
    private string response = string.Empty;

    protected override void OnInitialized()
    {
    }
    private async Task HandleRegistration()
    {
        await RegisterAccountAsync();
        Console.WriteLine("Registration successful!");
    }
    private async Task HandleLogin()
    {
        await LoginAsync();
    }
    public async Task<Account> RegisterAccountAsync()
    {
        Account responseAccount = new();
        var httpClient = new HttpClient();
        var accountJson = JsonSerializer.Serialize(account);
        var content = new StringContent(accountJson, Encoding.UTF8, "application/json");

        try
        {
            HttpResponseMessage response = await httpClient.PostAsync("https://localhost:44312/Account/Register", content);

            if (response.IsSuccessStatusCode)
            {
                // Read the response body as a string
                var responseContent = await response.Content.ReadAsStringAsync();

                // Deserialize the response body string back to an Account object
                responseAccount = JsonSerializer.Deserialize<Account>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                Console.WriteLine($"Account registered successfully. ID: {responseAccount?.AccountId}");
                NavigationManager.NavigateTo("/home", false);

            }
            else
            {
                Console.WriteLine($"Failed to register account. Status code: {response.StatusCode}");
            }

            return responseAccount;
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Request error: {e.Message}");
            return responseAccount;
        }
    }

    public async Task<LoginResponse> LoginAsync()
    {
        LoginResponse loginResponse = null;
        var httpClient = new HttpClient();
        var accountJson = JsonSerializer.Serialize(account);
        var content = new StringContent(accountJson, Encoding.UTF8, "application/json");

        try
        {
            HttpResponseMessage response = await httpClient.PostAsync("https://localhost:44312/Account/Login", content);

            if (response.IsSuccessStatusCode)
            {
                // Read the response body as a string
                var responseContent = await response.Content.ReadAsStringAsync();

                // Deserialize the response body string back to an Account object
                loginResponse = JsonSerializer.Deserialize<LoginResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (loginResponse.IsLoggedIn)
                {
                    try
                    {
                        using var ctx = await dbContext.CreateDbContextAsync();
                        await ctx.Accounts.AddRangeAsync(loginResponse.OnlineAccounts);
                        await ctx.SaveChangesAsync();

                    }
                    catch (Exception ex)
                    {
                        //Console.WriteLine(ex);
                    }
                    UserState.Accounts = loginResponse.OnlineAccounts;

                    Console.WriteLine($"Login successfull.  {JsonSerializer.Serialize(loginResponse)}");
                    NavigationManager.NavigateTo("/home", false);
                }
                else
                    Console.WriteLine("Login NOT successfull.");

            }
            else
            {
                Console.WriteLine($"Failed to Login. Status code: {response.StatusCode}");
            }

            return loginResponse;
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Request error: {e.Message}");
            return loginResponse;
        }
    }
}